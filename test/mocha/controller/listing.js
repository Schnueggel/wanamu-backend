'use strict';
/**
 * Created by Christian on 5/2/2015.
 */
var assert = require('assert'),
    ListingController = require('../../../dist/server/server/controller/Listing'),
    ListingModel = require('../../../dist/server/server/model/Listing'),
    co = require('co'),
    sinon = require('sinon');

describe('Test Listing Controller', function () {
    var lc,
        req = {},
        res = {};

    beforeEach(function(){
        lc =  ListingController;
        req =  {};
        res = {};
    });

    it('Should have a function named get,list, create, delete and updated', function () {
        assert.equal(typeof lc, 'object');
        assert.equal(typeof lc.list, 'function');
        assert.equal(typeof lc.get, 'function');
        assert.equal(typeof lc.create, 'function');
        assert.equal(typeof lc.destroy, 'function');
        assert.equal(typeof lc.update, 'function');
    });

    it('Creates Listing', function (done) {
        var testTitle ='Test controller Listing create' ;

        req.body = {
            title: testTitle
        };

        res.send = sinon.spy();
        res.status = sinon.stub().returns(res);
        //We assume there is a user with id 1 generated by the test setup
        req.user = {
            id: 1,
            get: sinon.stub().returns(1)
        };

        lc.create(req, res).then(function(){
            assert(res.send.called, true, 'Response.send not called');
            assert(typeof res.send.callCount, 1, 'Response.send was called more or less then once');
            assert(typeof res.send.args[0][0], 'object');
            assert(res.send.getCall(0).args[0].data.title, testTitle);
            assert(res.send.getCall(0).args[0].data.userId, 1);
            done();
        }).catch(function(err){
            done(err);
        });
    });

    it('Update Listing', function(done){
        var testTitle ='Test controller Listing update' ;

        req.body = {
            id: 1,
            title: testTitle
        };

        req.params = {
            id: 1
        };

        res.send = sinon.spy();
        res.status = sinon.stub().returns(res);
        //We assume there is a user with id 1 generated by the test setup
        req.user = {
            id: 1,
            get: sinon.stub().returns(1),
            UserGroup: {
                name: 'private'
            }
        };

        ListingModel.findOne(1).then(function(listing){
            lc.update(req, res)
                .then(function(){
                    var data1 = res.send.getCall(0).args[0].data;

                    assert(res.send.called, true, 'Response.send not called');
                    assert(typeof res.status.callCount, 0, 'Response.status was called');
                    assert(typeof res.send.getCall(0).args[0], 'object');
                    assert(data1.title, testTitle);
                    assert(data1.userId, 1);
                    assert(data1.updatedAt !== listing.updatedAt, true);
                    done();
                }).catch(function(err){
                    done(err);
                });
        }).catch(function(err){
            done(err);
        });
    });

    it('Should not updated, because listing doesnt exists', function(done){
        var testTitle ='Test controller Listing update' ;

        req.body = {
            title: testTitle
        };

        req.params = {
            id: 1000
        };

        res.send = sinon.spy();
        res.status = sinon.stub().returns(res);
        //We assume there is a user with id 1 generated by the test setup
        req.user = {
            id: 1,
            get: sinon.stub().returns(1),
            UserGroup: {
                name: 'private'
            }
        };

        lc.update(req, res).then(function(){
            assert(res.send.called, true, 'Response.send not called');
            assert(typeof res.status.callCount, 1, 'Response.status was not called');
            assert(typeof res.status.getCall(0).args[0], 422, 'Invalid status code');
            assert(typeof res.send.callCount, 0, 'Send was called');
            done();
        }).catch(function(err){
            done(err);
        });
    });

    it('Should not updated, because user does not have enough rights', function(done){
        var testTitle ='Test controller Listing update 2' ;

        req.body = {
            title: testTitle
        };

        req.params = {
            id: 1
        };

        res.send = sinon.spy();
        res.status = sinon.stub().returns(res);
        //We assume there is a user with id 1 generated by the test setup
        req.user = {
            id: 2,
            get: sinon.stub().returns(2),
            UserGroup: {
                name: 'private'
            }
        };

        lc.update(req, res).then(function(){
            assert(res.send.called, true, 'Response.send not called');
            assert(typeof res.status.callCount, 1, 'Response.status was not called');
            assert(typeof res.status.getCall(0).args[0], 403, 'Invalid status code');
            assert(typeof res.send.callCount, 0, 'Send was called');
            done();
        }).catch(function(err){
            done(err);
        });
    });

    it('Should destroy', function(done){
        req.params = {
            id: 1
        };

        res.send = sinon.spy();
        res.status = sinon.stub().returns(res);
        //We assume there is a user with id 1 generated by the test setup
        req.user = {
            id: 1,
            get: sinon.stub().returns(1),
            UserGroup: {
                name: 'private'
            }
        };

        lc.destroy(req, res).then(function(){
            assert(res.send.called, true, 'Response.send not called');
            assert(typeof res.status.callCount, 0, 'Response.status was called');
            assert(typeof res.send.callCount, 1, 'Send was called');
            assert(typeof res.send.getCall(0).args.length, 0, 'Response.send should been called without args');

            ListingModel.findOne(1).then(function(listing){
                assert.equal(listing, null, 'Listing should not exist anymore');
                done();
            }).catch(function(err){
                done(err);
            });
        }).catch(function(err){
            done(err);
        });
    });

    it('Should not destroy because of wrong user', function(done){
        req.params = {
            id: 1
        };

        res.send = sinon.spy();
        res.status = sinon.stub().returns(res);
        //We assume there is a user with id 1 generated by the test setup
        req.user = {
            id: 2,
            get: sinon.stub().returns(2),
            UserGroup: {
                name: 'private'
            }
        };

        co(function*(){
            var listing = yield ListingModel.create({
                userId: 1
            });
            req.params.id = listing.id;

            yield lc.destroy(req, res);
            assert(res.send.called, true, 'Response.send not called');
            assert(typeof res.status.callCount, 1, 'Response.status was called');
            assert(typeof res.status.getCall(0).args[0], 403, 'Invalid status code');
            assert(typeof res.send.callCount, 1, 'Send was called');
            assert(typeof res.send.getCall(0).args[0], 'string', 'Response.send should been called string as args');
        }).then(function(){
            done();
        }).catch(function(err){
            done(err);
        });
    });
});
